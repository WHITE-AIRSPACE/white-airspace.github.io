<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CSSFlexBox写个数字键盘有多简单</title>
    <link href="/2020/07/24/CSSFlexBox%E5%86%99%E4%B8%AA%E6%95%B0%E5%AD%97%E9%94%AE%E7%9B%98%E6%9C%89%E5%A4%9A%E7%AE%80%E5%8D%95/"/>
    <url>/2020/07/24/CSSFlexBox%E5%86%99%E4%B8%AA%E6%95%B0%E5%AD%97%E9%94%AE%E7%9B%98%E6%9C%89%E5%A4%9A%E7%AE%80%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<p>在移动端开发的时候，如果输入内容 不复杂的情况下，自己实现一个键盘，<br>这样可以规避很多问题，比如安全问题，input输入框调起键盘布局被影响的问题。</p><p>最终实现效果：</p><img src='/images/keybord.gif'/> <p>首先键盘布局</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"keybord"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span></span><span class="hljs-tag">            <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(value, index) in letter"</span></span><span class="hljs-tag">            <span class="hljs-attr">:key</span>=<span class="hljs-string">"index"</span></span><span class="hljs-tag">            <span class="hljs-attr">:style</span>=<span class="hljs-string">"&#123; width: value === 0 ? '66%' : '32%' &#125;"</span></span><span class="hljs-tag">        &gt;</span>            &#123;&#123; value &#125;&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>data() &#123;return &#123;letter: [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 'x'],&#125;;&#125;,</code></pre><pre><code class="hljs css"><span class="hljs-selector-class">.keybord</span> &#123;<span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<span class="hljs-attribute">margin-top</span>: <span class="hljs-number">30px</span>;<span class="hljs-attribute">display</span>: flex;<span class="hljs-attribute">justify-content</span>: space-between; <span class="hljs-attribute">flex-direction</span>: row;<span class="hljs-attribute">flex-wrap</span>: wrap;&#125;<span class="hljs-selector-class">.keybord</span> <span class="hljs-selector-tag">li</span> &#123;<span class="hljs-attribute">width</span>: <span class="hljs-number">32%</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">96px</span>;<span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;<span class="hljs-attribute">background</span>: white;<span class="hljs-attribute">text-align</span>: center;<span class="hljs-attribute">font-family</span>: Helvetica;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">50px</span>;<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>;<span class="hljs-attribute">color</span>: <span class="hljs-number">#333333</span>;<span class="hljs-attribute">line-height</span>: <span class="hljs-number">96px</span>;&#125;</code></pre><p>以上就实现了一个简单的键盘，加上点击事件就能使用了。另外删除按钮如果不使用 “X”  的话可以单独找个图处理。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebSocket聊天室原理</title>
    <link href="/2020/07/20/WebSocket%E8%81%8A%E5%A4%A9%E5%AE%A4%E5%8E%9F%E7%90%86/"/>
    <url>/2020/07/20/WebSocket%E8%81%8A%E5%A4%A9%E5%AE%A4%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>对 WebSocket 协议 有了解的人，都应该知道它是一种<a href="https://en.wikipedia.org/wiki/Push_technology" target="_blank" rel="noopener">服务器推送技术</a>,</p><p>这个协议跟HTTP协议不同的地方在于： <code>HTTP 服务必须由客户端发起请求，服务端返回结果。</code> 做不到服务器主动向客户端推送信息，<br>加入服务端有一个状态连续的变化，客户端要获取会很麻烦，而 WebSocket 协议刚好可以用在这种时候。</p><p>WebSocket 最大的特点就是可以通过单个TCP连接提供双向的通信。</p><p>利用它的特点我们可以来写一个小的聊天室，顺便学习一下使用技巧</p><p>这里前端我们使用 <a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">Create React App</a>.<br>来实现前端页面。</p><p>新建 Chat.js</p><ol><li>React 使用 Websocket</li></ol><pre><code class="hljs js">ws = <span class="hljs-keyword">new</span> WebSocket(URL)componentDidMount() &#123;    <span class="hljs-keyword">this</span>.ws.onopen = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;        <span class="hljs-comment">// on connecting, do nothing but log it to the console</span>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'connected'</span>)    &#125;    <span class="hljs-keyword">this</span>.ws.onmessage = <span class="hljs-function"><span class="hljs-params">evt</span> =&gt;</span> &#123;        <span class="hljs-comment">// on receiving a message, add it to the list of messages</span>        <span class="hljs-keyword">const</span> message = <span class="hljs-built_in">JSON</span>.parse(evt.data)        <span class="hljs-keyword">this</span>.addMessage(message)    &#125;    <span class="hljs-keyword">this</span>.ws.onclose = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'disconnected'</span>)        <span class="hljs-comment">// automatically try to reconnect on connection loss</span>        <span class="hljs-keyword">this</span>.setState(&#123;            ws: <span class="hljs-keyword">new</span> WebSocket(URL),        &#125;)    &#125;&#125;</code></pre><ol start="2"><li>发送消息</li></ol><pre><code class="hljs js">submitMessage = <span class="hljs-function"><span class="hljs-params">messageString</span> =&gt;</span> &#123;       <span class="hljs-comment">// on submitting the ChatInput form, send the message, add it to the list and reset the input</span>       <span class="hljs-keyword">const</span> message = &#123; <span class="hljs-attr">name</span>: <span class="hljs-keyword">this</span>.state.name, <span class="hljs-attr">message</span>: messageString &#125;       <span class="hljs-keyword">this</span>.ws.send(<span class="hljs-built_in">JSON</span>.stringify(message))       <span class="hljs-keyword">this</span>.addMessage(message)   &#125;</code></pre><p>后端代码很简单，起一个WebSocket服务就行</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> WebSocket = <span class="hljs-built_in">require</span>(<span class="hljs-string">'ws'</span>);<span class="hljs-keyword">const</span> wss = <span class="hljs-keyword">new</span> WebSocket.Server(&#123; <span class="hljs-attr">port</span>: <span class="hljs-number">3030</span> &#125;);wss.on(<span class="hljs-string">'connection'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connection</span>(<span class="hljs-params">ws</span>) </span>&#123;  ws.on(<span class="hljs-string">'message'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">incoming</span>(<span class="hljs-params">data</span>) </span>&#123;    wss.clients.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">each</span>(<span class="hljs-params">client</span>) </span>&#123;      <span class="hljs-keyword">if</span> (client !== ws &amp;&amp; client.readyState === WebSocket.OPEN) &#123;        client.send(data);      &#125;    &#125;);  &#125;);&#125;);</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>WebSocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS实现页面禁止截屏</title>
    <link href="/2020/07/19/JS%E5%AE%9E%E7%8E%B0%E9%A1%B5%E9%9D%A2%E7%A6%81%E6%AD%A2%E6%88%AA%E5%B1%8F/"/>
    <url>/2020/07/19/JS%E5%AE%9E%E7%8E%B0%E9%A1%B5%E9%9D%A2%E7%A6%81%E6%AD%A2%E6%88%AA%E5%B1%8F/</url>
    
    <content type="html"><![CDATA[<p>需求介绍：现有一个内嵌在APP端的H5支付页面，需要在当前页面禁止截屏以及录屏。</p><p>实现步骤：</p><ol><li>APP端监听用户截屏录屏行为</li><li>APP端通知H5页面</li><li>H5页面监听是否有APP端的通知</li></ol><p>以上为实现的死了，主要运用到的知识点为， 原声APP跟JS的交互<br>APP端调用创建自定义事件接口 <code>CustomEvent</code></p><p>关键代码实现：</p><pre><code class="hljs oc">[slef nativeEvaluateJavaScriptWithCallBackId:@&quot;notify&quot;,type:&#39;截屏状态&#39;]</code></pre><p>App断监听到事件，并且带上数据给我们通知以后，我们就只需要在页面监听 “notify” 这个自定义事件就行</p><p>关键代码：</p><pre><code class="hljs js">componentDidMount() &#123;      <span class="hljs-keyword">var</span> _self = <span class="hljs-keyword">this</span>      _self.globalNotify = <span class="hljs-function">(<span class="hljs-params">ev</span>) =&gt;</span> &#123;          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.userPhoneModel !== <span class="hljs-string">'Android'</span>) &#123;              <span class="hljs-keyword">const</span> detail = ev.detail || &#123;&#125;;              <span class="hljs-keyword">const</span> type = detail.type || <span class="hljs-string">''</span>;              <span class="hljs-built_in">console</span>.log(type)              <span class="hljs-keyword">if</span> (type === <span class="hljs-string">'screen_recording'</span> || type === <span class="hljs-string">'screen_capture'</span>) &#123;                  _self.setState(&#123;                      safeMode: <span class="hljs-literal">true</span> <span class="hljs-comment">// 页面展示安全提示</span>                  &#125;)              &#125;          &#125;      &#125;      <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'notify'</span>, _self.globalNotify)  &#125;  componentWillUnmount() &#123;      <span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string">'notify'</span>, <span class="hljs-keyword">this</span>.globalNotify)  &#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-everyday</title>
    <link href="/2020/07/16/Linux-everyday/"/>
    <url>/2020/07/16/Linux-everyday/</url>
    
    <content type="html"><![CDATA[<h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><pre><code class="hljs shell">pwd使用pwd命令找出您所在的当前工作目录（文件夹）的路径。该命令将返回绝对（完整）路径</code></pre><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><pre><code class="hljs shell">ls 默认情况下，此命令将显示当前工作目录的内容;如果要查看其他文件夹内容，可在 `ls` 后面输入目录的路径，例如： `ls /home/user`还可以搭配以下参数使用：- ls -R  子目录的所有文件也会被列出- ls -a  将显示隐藏的文件- ls -al 将列出文件和目录以及详细信息，例如权限，大小，所有者等。</code></pre><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>是Linux中最常用的命令之一,它用于在标准输出（sdout）上列出文件的内容,<br>要运行此命令，请键入cat，然后输入文件名及其扩展名。例如：cat file.txt。</p><p>使用方法</p><ul><li><code>cat&gt; filename</code>创建一个新文件</li><li><code>cat filename1 filename2&gt; filename3</code> 合并两个文件（1和2）并将它们的输出存储在新文件中（3）</li><li>将文件转换为大写或小写使用，<code>cat filename | TR AZ AZ&gt; output.txt</code></li></ul><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>使用cp命令将文件从当前目录复制到另一个目录。<br>例如，命令<code>cp scenery.jpg /home/username/Pictures</code>将在您的Pictures目录中（从您的当前目录创建）scenery.jpg的副本。</p><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>经常用于移动文件，也可用于重命名文件</p><p>mv中的参数类似于cp命令，您需要输入mv，文件名和目标目录。<br>例如：<code>mv file.txt /home/username/Documents。</code></p><p>重命名的使用，<code>mv  oldname.ext newname.ext</code></p><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>使用mkdir命令创建一个新目录-如果键入mkdir Music，它将创建一个名为Music的目录。</p><p>还有其他的mkdir命令：</p><ul><li>要在另一个目录中生成新目录，请使用此Linux基本命令<code>mkdir Music/ Newfile</code></li><li>使用  p（父级）选项在两个现有目录之间创建目录。例如，<code>mkdir -p Music / 2020 / Newfile</code>将创建新的“ 2020”文件。</li></ul><h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h3><p>如果需要删除目录，请使用rmdir命令。但是，rmdir仅允许您删除空目录。</p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>该RM命令用于删除目录以及其中的内容。如果只想删除目录（作为rmdir的替代方法），请使用rm -r。</p><p>注意：使用此命令时要格外小心，并仔细检查您所在的目录。这将删除所有内容，并且没有撤消操作。</p><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p>该<code>touch</code>命令允许您创建通过Linux命令行新的空白文件。例如，输入<code>touch /home/username/Documents/Web.html在Documents</code>目录下创建一个名为Web的HTML文件。</p><h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h3><p>您可以使用此命令来定位文件，就像Windows中的搜索命令一样。此外，将-i参数与该命令一起使用将使其不区分大小写，因此即使您不记得其确切名称，也可以搜索文件。</p><p>要搜索包含两个或多个单词的文件，请使用星号（*）。例如，locate -i school * note命令将搜索任何包含单词“ school”和“ note”的文件，无论它是大写还是小写。</p><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>在类似定位命令，使用  查找也搜索文件和目录。区别在于，您可以使用find命令在给定目录中查找文件。</p><p>例如，find / home / -name notes.txt命令将在主目录及其子目录中搜索名为notes.txt的文件。</p><p>使用查找时的其他变化 是：</p><ul><li>要查找当前目录中使用的文件，<code>find .-name notes.txt</code></li><li>要查找目录，请使用<code>/ -type d -name notes. txt</code></li></ul><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>另一个经常经常会使用到的命令<code>grep</code>, 可以帮助你搜索出所有文本在你指定的文件中。</p><p>例如， <code>grep blue notepad.text</code> 将会在 “notepad.text” 文件中搜索 “blue” 这个单词，并且会显示该搜索结果的行数。</p><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p>这个命令是 “SuperUser Do” 的简称， 使您能够执行需要管理或超级用户权限的任务。 但是，建议不要将此命令用于日常使用，因为如果您做错了事，很容易发生错误。</p><h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><p>使用df命令可获取有关系统磁盘空间使用情况的报告，以百分比和KB表示。如果要以兆字节为单位查看报告，请输入<code>df -m</code>。</p><h3 id="du"><a href="#du" class="headerlink" title="du"></a>du</h3><p>如果要检查文件或目录占用了多少空间，答案是du（磁盘使用情况）命令。但是，磁盘使用情况摘要将显示磁盘块号，而不是通常的大小格式。如果要以字节，千字节和兆字节为单位查看它，请在命令行中添加-h参数。</p><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p><code>head</code> 命令用来先显示文件的开头内容，默认情况下，将显示前十行，但是您可以根据自己的喜好更改数字，例如，只显示前五行，则键入 <code>head -n 5 filename.text</code></p><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>跟 head 命令有相似的功能，但是 <code>tail</code> 命令將显示文件的最后十行，例如 <code>tail -n filename.text</code></p><h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h3><p>diff 命令是 “difference” 的缩写，这个命令将会逐行比较文件的不同，并且会输出两个文件不同的行数。例如：<code>diff file.text file.text</code></p><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p>该命令是最常用的命令归档多个文件到一个压缩包 -类似于zip格式常见的Linux文件格式，压缩是可选的。<br>此命令非常复杂，具有很多功能，例如将新文件添加到现有档案中，列出档案内容，从档案中提取内容等等。查看一些<a href="https://www.linuxtechi.com/17-tar-command-examples-in-linux/" target="_blank" rel="noopener">实际示例</a>，以了解有关其他功能的更多信息。</p><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><p>chmod是另一个Linux命令，用于更改文件和目录的读取，写入和执行权限。由于此命令相当复杂，因此您可以阅读<a href="https://www.computerhope.com/unix/uchmod.htm" target="_blank" rel="noopener">完整的教程</a>以正确执行它。</p><h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><p>在Linux中，所有文件均由特定用户拥有。该CHOWN命令使您可以更改或文件的所有权转让给指定的用户名。例如，chown linuxuser2 file.ext将使linuxuser2成为file.ext的所有者。</p><h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><p>如果您的程序无响应，则可以使用kill命令手动终止它。它将向运行异常的应用发送特定信号，并指示该应用自行终止。</p><p>您总共可以使用<a href="https://linoxide.com/linux-how-to/linux-signals-part-1/" target="_blank" rel="noopener">64个信号</a>，但是人们通常只使用两个信号：</p><ul><li>SIGTERM (15) -请求程序停止运行，并给它一些时间来保存其所有进度。如果在输入kill命令时未指定信号，则将使用此信号。</li><li>SIGKILL (9) -强制程序立即停止。未保存的进度将丢失。</li></ul><p>除了知道信号之外，您还需要知道要杀死的程序的进程标识号（PID）。如果您不知道PID，只需运行命令ps ux。</p><p>在知道您要使用什么信号以及程序的PID之后，输入以下语法：</p><p>kill [信号选项] PID。</p><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p>使用ping命令检查与服务器的连接状态。例如，只需输入ping google.com，该命令将检查您是否能够连接到Google并测量响应时间。</p><h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><p>Linux命令行非常有用-您甚至可以在wget命令的帮助下从Internet下载文件。为此，只需键入wget，然后键入下载链接。</p><h3 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h3><p>该UNAME命令，短期对于Unix名，将打印您的Linux系统，如计算机名称的详细信息，操作系统，内核，等等。</p><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p>作为与Windows中的任务管理器等效的终端，top命令将显示正在运行的进程以及每个进程使用多少CPU的列表。监视系统资源使用情况非常有用，尤其是知道哪个进程由于消耗太多资源而需要终止时。</p><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>使用Linux一段时间后，您会很快注意到每天可以运行数百个命令。因此，如果您想查看之前输入的命令，运行历史记录命令特别有用。</p><h3 id="man"><a href="#man" class="headerlink" title="man"></a>man</h3><p>对某些Linux命令的功能感到困惑吗？不用担心，您可以使用man命令从Linux的外壳程序中轻松学习如何使用它们。例如，输入man tail将显示tail命令的手动指令。</p><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>此命令用于将一些数据移到文件中。例如，如果要将文本“ Hello，我的名字叫约翰”添加到名为name.txt的文件中，则键入echo Hello，我的名字是John &gt;&gt; name.txt</p><h3 id="zip-uzip"><a href="#zip-uzip" class="headerlink" title="zip ,uzip"></a>zip ,uzip</h3><p>使用zip命令将文件压缩到zip存档中，并使用unzip命令从zip存档中提取压缩文件</p><h3 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h3><p>如果您想知道主机/网络的名称，只需键入hostname。在末尾添加-I将显示网络的IP地址。</p><h3 id="useradd-userdel"><a href="#useradd-userdel" class="headerlink" title="useradd,userdel"></a>useradd,userdel</h3><p>由于Linux是多用户系统，因此这意味着多个人可以同时与同一个系统进行交互。userpass用于创建新用户，而passwd将密码添加到该用户的帐户。要添加一个名为John的新用户，请添加user John，然后添加其密码类型passwd 123456789。</p><p>删除用户与添加新用户非常相似。要删除用户帐户类型，请使用userdel UserName</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IOS WEBVIEW 进程被挂起倒计时失效的问题</title>
    <link href="/2020/07/08/ios-coudown/"/>
    <url>/2020/07/08/ios-coudown/</url>
    
    <content type="html"><![CDATA[<h2 id="IOS-WEBVIEW-有JS倒计时函数时候息屏或者切换后台倒计时会暂停的问题"><a href="#IOS-WEBVIEW-有JS倒计时函数时候息屏或者切换后台倒计时会暂停的问题" class="headerlink" title="IOS WEBVIEW 有JS倒计时函数时候息屏或者切换后台倒计时会暂停的问题"></a>IOS WEBVIEW 有JS倒计时函数时候息屏或者切换后台倒计时会暂停的问题</h2><pre><code class="hljs js">&gt; 计算订单倒计时Countdown() &#123;        <span class="hljs-keyword">let</span> now = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(), <span class="hljs-comment">//当前时间</span>            createTime = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(createTime),<span class="hljs-comment">//创建时间</span>            exprie = <span class="hljs-number">30</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>, <span class="hljs-comment">// 过期时长</span>            dif = (createTime + exprie) - now;        <span class="hljs-keyword">this</span>.timer = setInterval(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;            <span class="hljs-keyword">if</span> (dif &gt; <span class="hljs-number">1000</span>) &#123;                dif -= <span class="hljs-number">1000</span>                <span class="hljs-keyword">let</span> minute = <span class="hljs-built_in">Math</span>.floor((dif / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span>) % <span class="hljs-number">60</span>);                <span class="hljs-keyword">let</span> second = <span class="hljs-built_in">Math</span>.floor(dif / <span class="hljs-number">1000</span> % <span class="hljs-number">60</span>);                <span class="hljs-keyword">this</span>.setState(&#123;                    seconds: second &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">"0"</span> + second : second,                    minute: minute &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">"0"</span> + minute : minute,                &#125;)            &#125; <span class="hljs-keyword">else</span> &#123;                clearInterval(<span class="hljs-keyword">this</span>.timer);                <span class="hljs-built_in">window</span>.location.reload()            &#125;        &#125;, <span class="hljs-number">1000</span>)    &#125;</code></pre><blockquote><p>页面加载完调用</p></blockquote><pre><code class="hljs js">componentDidMount()&#123;    <span class="hljs-keyword">this</span>.Countdown() <span class="hljs-comment">// 倒计时</span>    <span class="hljs-keyword">this</span>.visibilityChange() <span class="hljs-comment">//判断页面是否被隐藏</span>&#125;</code></pre><blockquote><p>定义监听页面是否被隐藏函数</p></blockquote><pre><code class="hljs js">visibilityChange() &#123;        <span class="hljs-comment">//判断页面是否被隐藏 兼容 IOS/AD</span>        <span class="hljs-keyword">let</span> hidden, visibilityChange;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">document</span>.hidden !== <span class="hljs-string">"undefined"</span>) &#123;            hidden = <span class="hljs-string">"hidden"</span>;            visibilityChange = <span class="hljs-string">"visibilitychange"</span>;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">document</span>.mozHidden !== <span class="hljs-string">"undefined"</span>) &#123;            hidden = <span class="hljs-string">"mozHidden"</span>;            visibilityChange = <span class="hljs-string">"mozvisibilitychange"</span>;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">document</span>.msHidden !== <span class="hljs-string">"undefined"</span>) &#123;            hidden = <span class="hljs-string">"msHidden"</span>;            visibilityChange = <span class="hljs-string">"msvisibilitychange"</span>;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">document</span>.webkitHidden !== <span class="hljs-string">"undefined"</span>) &#123;            hidden = <span class="hljs-string">"webkitHidden"</span>;            visibilityChange = <span class="hljs-string">"webkitvisibilitychange"</span>;        &#125;        <span class="hljs-built_in">document</span>.addEventListener(visibilityChange, () =&gt; &#123;            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">document</span>[hidden]) &#123;                <span class="hljs-comment">// 再次执行一次矫正时间    </span>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'回来了'</span>)            &#125;        &#125;)    &#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>REACT 滚动加载实现</title>
    <link href="/2020/07/08/react-load/"/>
    <url>/2020/07/08/react-load/</url>
    
    <content type="html"><![CDATA[<h2 id="REACT-滚动加载实现"><a href="#REACT-滚动加载实现" class="headerlink" title="REACT 滚动加载实现"></a>REACT 滚动加载实现</h2><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><pre><code class="hljs js">checkVisible = <span class="hljs-function">(<span class="hljs-params">node</span>) =&gt;</span> &#123;    <span class="hljs-keyword">if</span> (node) &#123;        <span class="hljs-keyword">const</span> &#123;top, bottom, left, right&#125; = node.getBoundingClientRect();        <span class="hljs-keyword">return</span> bottom &gt; <span class="hljs-number">0</span>            &amp;&amp; top &lt; <span class="hljs-built_in">window</span>.innerHeight            &amp;&amp; left &lt; <span class="hljs-built_in">window</span>.innerWidth            &amp;&amp; right &gt; <span class="hljs-number">0</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;</code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect" target="_blank" rel="noopener">getBoundingClientRect 接口相关知识 </a></p></blockquote><p>滚动监听判断监听的元素是否出现在屏幕中</p><pre><code class="hljs js">handleScroll() &#123;    <span class="hljs-keyword">let</span> more = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'more'</span>) <span class="hljs-comment">// 监测的元素</span>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.checkVisible(more)) &#123;        <span class="hljs-keyword">this</span>.loadMore()    &#125;&#125;</code></pre><pre><code class="hljs js">loadMore()&#123;    <span class="hljs-comment">// more data</span>&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
